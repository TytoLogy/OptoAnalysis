%------------------------------------------------------------------------
% ImportSortedPLXData.m
%------------------------------------------------------------------------
% TytoLogy:OptoAnalysis:SampleCode
%------------------------------------------------------------------------
% example script to show how to load sorted (Plexon) data as object
%
% Requires code from optosort, opto and OptoAnalysis (as well as 
% typical TytoLogy tools)
%------------------------------------------------------------------------
% See Also: optosort, optoproc, opto (TytoLogy:opto program)
%------------------------------------------------------------------------

%------------------------------------------------------------------------
% Sharad Shanbhag
% sshanbhag@neomed.edu
%------------------------------------------------------------------------
% Created: 30 September 2020 (SJS)
%	 
% Revisions:
%
%------------------------------------------------------------------------


%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% define paths and data files
%------------------------------------------------------------------------
%------------------------------------------------------------------------

%------------------------------------------------------------------------
% data locations - adjust this for your setup
%------------------------------------------------------------------------

% location of .plx file (from Plexon OfflineSorter)
plxFilePath = '/Users/sshanbhag/Work/Data/TestData/exports/1407';
% location of _nexInfo.mat file (generated by export_for_plexon)
nexInfoPath = plxFilePath;

% sorted data file name
plxFile = '1407_20200305_01_01_550_BBN-Sorted.plx';
% nexinfo file
nexInfoFile = '1407_20200305_01_01_550_BBN_nexinfo.mat';


sendmsg(sprintf('Using data from file: %s', plxFile));


%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% load sorted data
%------------------------------------------------------------------------
% How to use:
% import_from_plexon(<plx file name>, <nexinfo file name>, 
%								<'continuous'/'nocontinuous'>)
%
%	will return a SpikeData object containing data from plx file:
% 	- spike times/unit information if sorted
% 	- continuous data, if saved in plx and 'continuous' is 
%		specified (default)
% 	- file stimulus info
%------------------------------------------------------------------------
%------------------------------------------------------------------------

%------------------------------------------------------------------------
% there are two options here - if you feel that you'll want to look at the
% continuous data (recordings from electroeds), you can specify the
% 'continuous' option to load them.  otherwise, say "nocontinuous' to save
% time and memory
%------------------------------------------------------------------------
S = import_from_plexon(fullfile(plxFilePath, plxFile), ...
							fullfile(nexInfoPath, nexInfoFile), 'continuous');


%------------------------------------------------------------------------
%% show file, channel, unit
%------------------------------------------------------------------------
% SpikeData.printInfo method will print/display file, channel, unit info
% and returns information about the data in:
%  fileList = {nfiles, 1} cell array of original .dat files 
%  channelList = [# A/D Channels, 1] vector of channel ID numbers (A/D)
%  unitList = {# A/D Channels, 1} cell array, where each element is a
%             vector of unit ID #s from Plexon
[fileList, channelList, unitList] = S.printInfo;

%------------------------------------------------------------------------
%------------------------------------------------------------------------
%{
The actual sorted data in SpikeData is stored as a MATLAB Table object 
(see MATLAB docs for more information) called Spikes:

SpikeData.Spikes: 
 Spikes: [#spikes×5 table]

A table object is sort of like a combination of an array and a structure.
 - Each row contains parameters of a single observation or data entry. 
 - Each column contains information - which can be a value, string or 
   array - for that data entry

The table 'columns' (more properly called variables) are:
 'Channel'    'Unit'    'TS'    'PCA'    'Wave'

and each row corresponds to an entry for each detected spike

Variables:

 Channel     is the TDT A/D channel on which spike was detected
 Unit        Plexon's unit ID number for that channel and spike
 TS          time stamp for spike, in seconds
 PCA         Plexon PCA values
 Wave        [1, # samples] vector of samples for the detected waveform
              sample rate should be same as raw .dat file data and is
              stored in the SpikeData.SpikeInfo object Fs property, e.g.,
              S.Info.Fs

If we display the first 2 rows of S.Spikes, we get:
>> S.Spikes(1:2, :)

ans = 

    Channel    Unit       TS            PCA            Wave     
    _______    ____    _________    ___________    _____________

     7         1       0.0010854    0    0    0    [1x64 double]
    16         1       0.0024576    0    0    0    [1x64 double]
%}
%------------------------------------------------------------------------
%------------------------------------------------------------------------
